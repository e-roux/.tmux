##############################################################################
# tmux configuration file.          ┌─┬─┐                                    #
#                                   │ ├─┤                                    #
#                                   └─┴─┘                                    #
# Sources:                                                                   #
# http://man7.org/linux/man-pages/man1/tmux.1.html
# https://github.com/MacLemon/dotfiles/blob/master/tmux/.tmux.conf           #
##############################################################################

# set is the alias of set-option
# set -g is used to set global options
#     -ga appends values to existing settings
# setw is an alias for set-window-option

# Change prefix key
unbind C-b
set -g prefix C-a

set -g default-terminal "screen-256color"
set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
# Allow multiple commands to be entered without pressing the 
# prefix-key again in the specified time milliseconds
set -g repeat-time 500
# Set parent terminal title to reflect current window in tmux session 
set -g set-titles on
set -g set-titles-string "#I:#W"
# Activity bell and whistles
set -g visual-activity on
# Enable mouse support
set -g mouse on

# Reload tmux configuration 
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

##############################################################################
# Window handling and Session nesting. #
##############################################################################

# Start numbering windows and panes at index 1
# Because that's how numbers are layed out on the keyboard

# Makes for an idiomatic spacial layout cue.
#
# ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬──────┐
# │ ^ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ ? │ ´ │ Bspc │
# └───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴──────┘

# Set the base index from which an unused index should be
# searched when a new window is created
set -g base-index 1
# Like base-index, but set the starting index for pane numbers.
setw -g pane-base-index 1
# Allow programs in the pane to change the window name using a
# terminal escape sequence (\ek...\e\\).
setw -g allow-rename off
# Control automatic window renaming.  When this setting is
# enabled, tmux will rename the window automatically using the
# format specified by automatic-rename-format.  This flag is
# automatically disabled for an individual window when a name is
# specified at creation with new-window or new-session, or later
# with rename-window, or with a terminal escape sequence.
setw -g automatic-rename off
# Aggressively resize the chosen window.  This means that tmux
# will resize the window to the size of the smallest or largest
# session (see the window-size option) for which it is the cur‐
# rent window, rather than the session to which it is attached.
setw -g aggressive-resize on
# Prefer vi style key table
setw -g mode-keys vi

# new window and retain cwd
bind -n C-T new-window 
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
unbind "\$"
unbind ,  
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

unbind "'"  # select-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
# ndow-status-current-bg whiteSelect pane and windows

# next and previous window
unbind p    # previous-window
bind -r C-h previous-window
unbind n    # next-window
bind -r C-l next-window 

# bind -r Tab last-window   # cycle thru MRU tabs
# Kill the current window.
unbind &    # kill-window
bind X kill-window  # // to 'x kill-pane' 
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"

###############################################################################
# Panes
###############################################################################
#
# ┌───┐ Splitting windows into panes with memorizable commands
# ┝━━━┥ A vertical split positions panes up and down.
# └───┘ Think of PREFIX - as the separating line.
unbind '"'
bind _ split-window -v -c "#{pane_current_path}"

# ┌─┰─┐ Splitting windows into panes with memorizable commands
# │ ┃ │ A horizontal split positions panes left and right.
# └─┸─┘ Think of PREFIX | (pipe symbol) as the separating line.
unbind %
bind | split-window -h -c "#{pane_current_path}"

bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
 # Swap the current pane with the previous/next pane
unbind }
unbind {
bind -r C-o swap-pane -D

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
bind-key -n M-j if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
bind-key -n M-k if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
bind-key -n M-l if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
bind-key -T copy-mode-vi 'M-\' select-pane -l

# Pane resize
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows 
###############################################################################
# ===       Plugins        ===
###############################################################################
set -g @plugin 'tmux-plugins/tpm'

# vim plugin for tmux.conf
set -g @plugin 'tmux-plugins/vim-tmux'

set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
is_wsl='uname -a | grep -q Microsoft' 
if-shell -b 'uname -a | grep -q Ubuntu' "set -g @plugin 'tmux-plugins/tmux-online-status'"
set -g @plugin 'tmux-plugins/tmux-battery'

# Copy to the system clipboard in tmux.
set -g @plugin 'tmux-plugins/tmux-yank'

# Last saved environment is automatically restored when tmux is started.
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'

# set -g @plugin 'tmux-plugins/tmux-online-status'
# 'display -p "brace-dollar-foo: ${is_wsl}"' 
# set -g @plugin 'tmux-plugins/tmux-sidebar'
# set -g @plugin 'tmux-plugins/tmux-copycat'
# set -g @plugin 'tmux-plugins/tmux-open'
# set -g @plugin 'samoshkin/tmux-plugin-sysstat'

###############################################################################
# ===    Appearence and status bar  ===
###############################################################################
# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃host │ 1 window │ 2 window │          host.example.com HH:MM 2018-07-04 👻 ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
# general status bar settings
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-justify left
set -g status-right-length 100

color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_blue"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

set -g mode-style "fg=default,bg=$color_main"
# command line style
set -g message-style "fg=$color_main,bg=$color_dark"
# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""
setw -g window-status-format " #I:#W "
setw -g window-status-current-style "fg=$color_light,bold,bg=$color_main"
setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[fg=$color_light] #I:#W #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

# last active window for easy switching
setw -g window-status-last-style "fg=brightblue"
# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main"
# outline for active pane
setw -g pane-active-border-style "fg=$color_main"

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# Status bar (left)
wg_session="#[fg=$color_session_text] #S #[default]"
set -g status-left "$wg_session"

# Status bar (right)
wg_battery="#{battery_status_fg} #{battery_icon} #{battery_percentage}"
wg_date="%a %d %h %H:%M "
wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Z],}#[default]"

# K8S
wg_kube="#(/bin/bash $HOME/.tmux/kube.tmux 250 $color_secondary cyan)"
# source-file ~/.tmux/kube.tmux

# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

set -g status-right "#{prefix_highlight} $wg_is_zoomed $wg_user_host | $wg_date | $wg_battery #{online_status}"

# online and offline icon for tmux-online-status
set -g @online_icon "#[fg=$color_level_ok]●#[default]"
set -g @offline_icon "#[fg=$color_level_stress]●#[default]"

# Configure view templates for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}'

# Configure tmux-battery widget colors
set -g @batt_color_full_charge "#[fg=$color_level_ok]"
set -g @batt_color_high_charge "#[fg=$color_level_ok]"
set -g @batt_color_medium_charge "#[fg=$color_level_warn]"
set -g @batt_color_low_charge "#[fg=$color_level_stress]"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"

##############################################################################
# ===     Copy mode, scroll and clipboard      ===
##############################################################################

set -g @copy_use_osc52_fallback on

#  List all paste buffers.
unbind "#"  # list-buffer 
# Insert the contents of a paste buffer into the specified pane.
# If not specified, paste into the current one.
bind p paste-buffer
bind P paste-buffer -s ''
# Choose which buffer to paste interactively from a list.
unbind =
bind C-p choose-buffer

# Enter copy mode to copy text or view the history
unbind [
bind -n M-Up copy-mode

unbind -n C-PageUp    # Enter copy mode and scroll one page up.
# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

yank="~/.tmux/yank.sh"

# Copy selected text
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection

unbind ]    # Paste the most recently copied buffer of text.
unbind o    # focus next pane in the current window
    
# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

##############################################################################
# === Window monitoring for activity and silence ===
##############################################################################

bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# TODO: Does not work as well, check on newer versions
# set -g visual-silence on

# BUG: bell-action other ignored · Issue #1027 · tmux/tmux · GitHub - https://github.com/tmux/tmux/issues/1027
# set -g visual-bell on
# setw -g bell-action other

##############################################################################
# ===        Renew environment      ===
##############################################################################
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
