##############################################################################
# tmux configuration file.          ┌─┬─┐                                    #
#                                   │ ├─┤                                    #
#                                   └─┴─┘                                    #
# Sources:                                                                   #
# http://man7.org/linux/man-pages/man1/tmux.1.html                           #
# https://github.com/MacLemon/dotfiles/blob/master/tmux/.tmux.conf           #
##############################################################################

#        Plugins {{{1
##############################################################################
# TPM not used, plugins manually loaded from git submodules

# Last saved environment is automatically restored when tmux is started.
# run-shell '~/.tmux/opt/tmux-resurrect/resurrect.tmux'

##########################################################################}}}1

# General {{{1
# set is the alias of set-option
# set -g is used to set global options
#     -ga appends values to existing settings
# setw is an alias for set-window-option

# Change prefix key
unbind C-b
set -g prefix C-a
set -g prefix2 C-,

set -g default-command zsh

# Terminal with 24 bit colors
set -as terminal-overrides ",*:RGB"

set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off

# Allow multiple commands to be entered without pressing the
# prefix-key again in the specified time milliseconds
set -g repeat-time 500

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

set -g visual-activity on  # Activity bell and whistles
set -g mouse on  # Enable mouse support

# Reload tmux configuration
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

##########################################################################}}}1

# Window control {{{1
##############################################################################

# Start numbering windows and panes at index 1
# Because that's how numbers are layed out on the keyboard

# Makes for an idiomatic spacial layout cue.
#
# ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬──────┐
# │ ^ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ ? │ ´ │ Bspc │
# └───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴──────┘

# Set the base index from which an unused index should be
# searched when a new window is created
set -g base-index 1
# Like base-index, but set the starting index for pane numbers.
setw -g pane-base-index 1
# Allow programs in the pane to change the window name using a
# terminal escape sequence (\ek...\e\\).
setw -g allow-rename off
# Control automatic window renaming.  When this setting is
# enabled, tmux will rename the window automatically using the
# format specified by automatic-rename-format.  This flag is
# automatically disabled for an individual window when a name is
# specified at creation with new-window or new-session, or later
# with rename-window, or with a terminal escape sequence.
setw -g automatic-rename off
# Aggressively resize the chosen window.  This means that tmux
# will resize the window to the size of the smallest or largest
# session (see the window-size option) for which it is the cur‐
# rent window, rather than the session to which it is attached.
setw -g aggressive-resize on
# Prefer vi style key table
setw -g mode-keys vi

# new window and retain cwd
bind C-t new-window
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
unbind "\$"
unbind ,
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

unbind "'"  # select-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert

# next and previous window
unbind p    # previous-window
bind -r C-h previous-window
bind -r h previous-window
unbind n    # next-window
bind -r C-l next-window
bind -r l next-window

# Kill the current window.
unbind &    # kill-window
bind c confirm-before -p "kill window? (y/n)" "kill-window"
bind -Twindow c confirm-before -p "kill pane (y/n)" "kill-pane"

###########################################################################}}}1

# Panes control {{{1
###############################################################################
# get if in vim from Vim Tmux Navigator
# https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Create two client modes: windows and pane: unify vim and tmux
bind -Troot C-w if-shell "$is_vim" 'send-keys C-w'  'switch-client -Twindow'
# bind -Troot C-q switch-client -Tpane

# ┌───┐ Splitting windows into panes with memorizable commands
# ┝━━━┥ A vertical split positions panes up and down.
# └───┘ Think of PREFIX _ as the separating line.
unbind '"'
bind -Twindow _ split-window -v -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# ┌─┰─┐ Splitting windows into panes with memorizable commands
# │ ┃ │ A horizontal split positions panes left and right.
# └─┸─┘ Think of PREFIX | (pipe symbol) as the separating line.
unbind %
bind -Twindow | split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"

# Swap the current pane with the previous/next pane
# vim: <C-w>x
# unbind }
# unbind {
bind -r C-x swap-pane -D

# Motion between panes: left, bottom, top, right
bind -Twindow h select-pane -L
bind -Twindow j select-pane -D
bind -Twindow k select-pane -U
bind -Twindow l select-pane -R
bind -Twindow C-h select-pane -L
bind -Twindow C-j select-pane -D
bind -Twindow C-k select-pane -U
bind -Twindow C-l select-pane -R

# Pane history: last/next
# bind -r j next-window
bind -r k last-window

# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\\\'  'select-pane -l'"

# Pane resize
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows

unbind Left
bind -r Left resize-pane -L 2

unbind Right
bind -r Right resize-pane -R 2

unbind Up
bind -r Up resize-pane -U 2

unbind Down
bind -r Down resize-pane -D 2

set -g @resurrect-save '>'
set -g @resurrect-restore '<'
bind C-s set synchronize-panes

###########################################################################}}}1

# Appearence and status bar {{{1
###############################################################################
# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃host │ 1 window │ 2 window │          host.example.com HH:MM 2018-07-04 👻 ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┃                                                                           ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

# general status bar settings {{{2
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-justify left
set -g status-right-length 100
set -g status-bg default
# 2}}}

# colors {{{2

## Solarized

base03=#002b36
base02=#073642
base01=#586e75
base00=#657b83
base0=#839496
base1=#93a1a1
base2=#eee8d5
base3=#fdf6e3
yellow=#b58900
orange=#cb4b16
# red=#dc322f
red=#b0b0b0
_red=#b0b0b0
magenta=#d33682
violet=#6c71c4
blue=#268bd2
cyan=#2aa198
green=#859900


# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark=colour232
color_light=white
color_session_text=colour39
color_status_text=colour245
color_main=brightred
color_secondary=yellow

color_level_ok=colour76
color_level_warn=colour220
color_level_stress=colour160
color_window_off_indicator=colour088
color_window_off_status_bg=colour238
color_window_off_status_current_bg=colour254

# 2}}}

# window ------------------------------------------------------------------{{{2

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

# default window
setw -g window-status-format " #I:#W "

# 2}}}

# status bar ---------------------------------------------------------------{{{2

# Status bar (left)
set -g status-left "#[fg=$color_session_text] #S #[default]"

# Status bar (right)
wg_date="%a %d %h %H:%M"
wg_user_host="#[fg=$violet]#(whoami)@#H#[default]"

# Background colour is found with colour-theme set in colors/toggle.sh
colour_bg="#{?#{==:#{@colors-theme},dark},$base02,$base2}"

wg_prefix="#[fg=$colour_bg]#{?client_prefix,#[bg=$violet]#[fg=$base02],#[bg=default]}[P]#[default]"
wg_window="#[fg=$colour_bg]#{?#{==:#{client_key_table},window},#[bg=$magenta]#[fg=$base02],#[bg=default]}[W]#[default]"
wg_is_zoomed="#[fg=$colour_bg]#{?window_zoomed_flag,#[bg=$cyan]#[fg=$base02],#[bg=default]}[Z]#[default]"
wg_is_synchronized="#[fg=$colour_bg]#{?pane_synchronized,#[bg=$yellow]#[fg=$base02],#[bg=default]}[S]#[default]"
wg_in_copymode="#[fg=$colour_bg]#{?#{==:#{pane_mode},copy-mode},#[bg=$green]#[fg=$base02],#[bg=default]}[C]#[default]"

# K8S
wg_kube="#[fg=blue]\u2388 #(/bin/bash ~/.tmux/opt/kubectx.tmux $color_blue $color_blue)"

# 2}}}

# TODO: fix {{{2
# https://github.com/tmux/tmux/issues/1340

# Do not load those if running WSL
# is_wsl="#(uname -a | grep -iq linux && echo 1)"

# online and offline icon for tmux-online-status
# set -g @online_icon "#[fg=$color_level_ok]●#[default]"
# set -g @offline_icon "#[fg=$color_level_stress]●#[default]"

# %if "#{?is_wsl}"
# # Configure tmux-battery widget colors
# set -g @batt_color_full_charge "#[fg=$color_level_ok]"
# set -g @batt_color_high_charge "#[fg=$color_level_ok]"
# set -g @batt_color_medium_charge "#[fg=$color_level_warn]"
# set -g @batt_color_low_charge "#[fg=$color_level_stress]"

# wg_battery="#{battery_icon} #{battery_percentage}"
# setw -g status-right "#{prefix_highlight} $wg_is_zoomed $wg_user_host | $wg_kube #[default]| $wg_date | $wg_battery #{online_status}"

# run-shell '~/.tmux/opt/tmux-battery/battery.tmux'
# run-shell '~/.tmux/opt/tmux-online-status/online_status.tmux'
# %endif
# 2}}}

setw -g status-right "$wg_in_copymode $wg_is_synchronized $wg_window $wg_prefix $wg_is_zoomed $wg_user_host | $wg_kube #[default]| $wg_date"

set -g mode-style "fg=default,bg=green"

#### COLOUR (Solarized)
source-file ~/.tmux/colors/tmuxcolors.conf

bind $ run-shell ~/.tmux/colors/toggle.sh
##########################################################################}}}1

# Copy mode, scroll and clipboard {{{1
##############################################################################
# Copy to the system clipboard in tmux.
run-shell '~/.tmux/opt/tmux-yank/yank.tmux'

set -g @copy_use_osc52_fallback on

#  List all paste buffers.
unbind "#"  # list-buffer
# Insert the contents of a paste buffer into the specified pane.
# If not specified, paste into the current one.
bind p paste-buffer
bind P paste-buffer -s ''
# Choose which buffer to paste interactively from a list.
unbind =
bind C-p choose-buffer

# Enter copy mode to copy text or view the history
unbind [
bind -n M-Up copy-mode
bind C-k copy-mode

unbind -n C-PageUp    # Enter copy mode and scroll one page up.
# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

yank="~/.tmux/yank.sh"

# Copy selected text
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection

unbind ]    # Paste the most recently copied buffer of text.
unbind o    # focus next pane in the current window

# tmux show-options -g -s set-clipboard
set set-clipboard on

bind -T copy-mode-vi C-j send-keys -X scroll-down
bind -T copy-mode-vi C-k send-keys -X scroll-up

##########################################################################}}}1


# vim:fdm=marker tabstop=2 shiftwidth=2
